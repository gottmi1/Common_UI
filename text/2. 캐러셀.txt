사전적 의미로 회전목마를 뜻한다.
웹에선 슬라이드 형태로 순환하며 이미지나 동영상을 콘텐츠를 노출하는 UI를 의미한다.

- 더 나은 UX를 위한 캐러셀
1. 오토플레이를 사용하지 않는다.
사용자가 직접 캐러셀을 컨트롤하게끔한다.
일반적인 사용자들은 이미 캐러셀이라는 UI에 익숙하기 때문.

2. 간결하고 명확한 카피를 작성

3. 슬라이더 내부에는 H1태그를 사용하지 않는다.
검색엔진이 h1태그를 제목으로 취급하기 때문에, 슬라이드가 여럿일 경우 한 페이지에 여러개의 제목을 부여하는 것과 같음.

4. 캐러셀이 터치 친화적인지 확인한다.
모바일에서는 스와이프를 이용하는것이 익숙한 경험이기 때문.


- 점검

이모션이 쓰기 좀 편해진 것 같다.

해당 컴포넌트의 자식 엘리먼트에만 스타일을 따로 주고 싶을 때, 컴포넌트 안에
> img {
    width: 100%;
    height: fit-content;
  }
이런 식으로 쓸 수 있다.

이모션 내부에 props가 필요할 때

styled.div<{props를 애초에 구조분해해서 넣음}>`
  props를 쓸 때
  ${       ({props를 애초에 구조분해 했기 떄문에 이렇게})      => ....   }
`

유즈이펙트

useEffect(() => {
    let intervalId: NodeJS.Timeout;

    if(!isFocused) {
      intervalId = setInterval(handleNext, 3000)
    }

    return () => {
      clearInterval(intervalId)
    }
},[isFocused])

조건에 따라 타임아웃,인터벌을 실행하고 클린업에서 클리어해주는 전형적인 형식.
setInterval의 타입이 NodeJS.Timeout 인 건 기억해 놔야할 것 같다. 타입을 제거하니 any타입이 되서 에러가 뜸

Array.from({length : banners.length}).map((_,idx) => (... 에서

map((_,idx) => {...}) 형식은 인덱스를 가져와야할 때 많이 쓰이는 것 같다.