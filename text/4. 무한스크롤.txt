모바일에서 페이지네이션 방식을 사용하기엔, 원 하는 페이지로 이동하기 위해  숫자 버튼을 일일이 손으로 눌러야 하기 때문에 굉장히 불편하다.

이 때 무한 스크롤 방식을 사용함.

사용자가 스클롤링 하다가 미리 로드된 콘텐츠를 다 확인하면, 다음 목록을 또 로드해서 별도의 인터렉션 없이 목록을 계속 불러오는 방식임.

element.scrollHeight

엘리먼트의 총 높이. 바깥으로 넘쳐서 보이지 않는 컨텐츠도 포함한다.

element.clientHeight

엘리먼트의 패딩을 포함한 높이.

element.offsetHeight

clientHeight에서 스크롤바, 마진,보더도 포함함

element.scrollTop

스크롤바의 top부분이 화면에 내려온 위치


scrollHeight - (scrollTop + clientHeight)이 미리 정해놓은 offsetHeight 미만일 경우 이를 최하단이라고 판단할 수 있다.


- 스크롤 방식의 한계

스크롤을 움직일 때마다 이벤트가 발생하기 때문에 문제가 야기될 수 있따.
이것을 해결하기 위해 보통은 스크롤 이벤트에 쓰로틀링을 적용하여 이벤트를 제한함.


- Debounce vs Throttling

DOM이벤트를 기반으로 실행하는 자바스크립트를 성능상의 이유로 이벤트를 제한할 때 이 둘중 하나를 사용함.

Debounce
이벤트를 그룹핑하여 특정 시간이 지난 후 하나의 이벤트만 발생하도록 함.
연달아 호출되는 함수들 중 마지막 함수만 호출하도록 하는 일.

Throttling
이벤트를 일정한 주기마다 발생시키는 기술
마지막 함수가 호출된 후 일정 시간이 지나기 전엔 다시 호출되지 안도록 한다.

